--- adpwc-1.0/contrib/slapd-modules/adpwc/adpwc.c.orig	2007-07-06 18:06:03.000000000 +0200
+++ adpwc-1.0/contrib/slapd-modules/adpwc/adpwc.c	2007-07-30 15:25:21.000000000 +0200
@@ -26,6 +26,7 @@
 #include <stdio.h>
 #include <ac/string.h>
 #include <ac/unistd.h>
+#include <ac/ctype.h>
 #include <slap.h>
 #include <krb5.h>
 #include <openssl/des.h>
@@ -43,9 +44,14 @@
 
 static int retry_auth_with_kerberos (Operation * op, SlapReply * rs);
 
-#define KRB5_CACHE_NO_PASSWD	0x0000U
-#define KRB5_CACHE_USER_PASSWD	0x0001U
-#define KRB5_CACHE_ANY_PASSWD	0x0002U
+#define KRB5_CACHE_NO_PASSWD		0x0000U
+#define KRB5_CACHE_USER_PASSWD		0x0001U
+#define KRB5_CACHE_ANY_PASSWD		0x0002U
+#define KRB5_CACHE_KEEP_REALM_CASE	0x0004U
+
+#define KRB5_CACHE_MODULE_DISABLED	0x0000U
+#define KRB5_CACHE_MODULE_ENABLED	0x0001U
+#define KRB5_CACHE_SMB_ENABLED		0x0002U
 
 typedef struct opcookie
 {
@@ -59,6 +65,7 @@
 typedef struct cache_config
 {
   unsigned flags;
+  unsigned state;
 } cache_config;
 
 /* all DO_SAMBA code is copied from contrib/slapd-modules/smbk5pwd/smbk5pwd.c by Howard Chu ... */
@@ -159,7 +166,7 @@
   SlapReply sreply = { REP_RESULT };
   Operation mop;
   Modifications *upw, *ntpw;
-  slap_callback cb = { NULL, slap_null_cb, NULL, NULL }, *realcb;
+  slap_callback cb = { NULL, slap_null_cb, NULL, NULL };
   const char *txt;
   struct berval *hpw;
 
@@ -189,13 +196,13 @@
   upw->sml_nvalues = hpw;
   upw->sml_next = NULL;
 
-  if (opc->flags == KRB5_CACHE_ANY_PASSWD)
+  if (opc->flags & KRB5_CACHE_ANY_PASSWD)
     {
 #ifdef DO_SAMBA
       struct berval *keys;
       ber_len_t j, l;
       wchar_t *wcs, wc;
-      char *c, *d;
+      char *c;
       struct berval pwd;
 
       /* Expand incoming UTF8 string to UCS4 */
@@ -267,7 +274,7 @@
   krb5_error_code kerr;
   krb5_principal client;
   krb5_creds client_creds;
-  krb5_ccache *credential_cache = NULL;
+  // krb5_ccache *credential_cache = NULL;
 
   Debug (LDAP_DEBUG_TRACE, "=>check_krb5_creds: " "entry %s\n",
 	 opc->sop->o_req_ndn.bv_val, 0, 0);
@@ -326,7 +333,7 @@
 	     opc->krbPrinc.bv_val, NULL, NULL);
     }
 
-  if (opc->flags != KRB5_CACHE_NO_PASSWD)
+  if (opc->flags & (KRB5_CACHE_ANY_PASSWD | KRB5_CACHE_USER_PASSWD))
     {
       cache_krb5_creds (opc);
     }
@@ -378,9 +385,17 @@
   unsigned flags;
   slap_overinst *on = (slap_overinst *) op->o_bd->bd_info;
   cache_config *cconf = on->on_bi.bi_private;
+  char *realm;
 
   Debug (LDAP_DEBUG_TRACE, "bypass_simple_bind: " "called\n", 0, 0, 0);
 
+  if (cconf->state == KRB5_CACHE_MODULE_DISABLED)
+    {
+      Debug (LDAP_DEBUG_TRACE,
+	     "bypass_simple_bind: " "no kerberos schema present\n", 0, 0, 0);
+      return SLAP_CB_CONTINUE;
+    }
+
   op->o_bd->bd_info = on->on_info->oi_orig;
   res = be_entry_get_rw (op, &op->o_req_ndn, NULL, NULL, 0, &e);
 
@@ -411,10 +426,10 @@
     }
 
   flags = cconf->flags;
-  if ((cconf->flags == KRB5_CACHE_ANY_PASSWD)
+  if ((cconf->flags & KRB5_CACHE_ANY_PASSWD)
       && (!is_entry_objectclass (e, oc_sambaSamAccount, 0)))
     {
-      flags = KRB5_CACHE_USER_PASSWD;
+      flags &= ~(KRB5_CACHE_ANY_PASSWD);
       Debug (LDAP_DEBUG_STATS, "bypass_simple_bind: "
 	     "cache type any not supported without sambaSamAccount.\n",
 	     NULL, NULL, NULL);
@@ -438,6 +453,7 @@
   if (op->oq_bind.rb_method == LDAP_AUTH_SIMPLE)
     {
       slap_callback *cb;
+      int i;
       cb =
 	op->o_tmpcalloc (1, sizeof (slap_callback) + sizeof (opcookie),
 			 op->o_tmpmemctx);
@@ -446,6 +462,47 @@
       opc->sop = op;
       opc->son = on;
       ber_dupbv (&opc->krbPrinc, &a->a_vals[0]);
+      if (flags & KRB5_CACHE_KEEP_REALM_CASE)
+	{
+	  realm = strchr (opc->krbPrinc.bv_val, '@');
+	  if (realm)
+	    {
+	      int haveLower = 0;
+	      realm++;
+	      for (i = 0; realm[i]; i++)
+		{
+		  if (islower (realm[i]))
+		    haveLower = 1;
+		}
+	      if (haveLower > 0)
+		{
+		  Debug (LDAP_DEBUG_STATS, "bypass_simple_bind: "
+			 "expect trouble with lower case char in realm for principal %s.\n",
+			 opc->krbPrinc.bv_val, NULL, NULL);
+		}
+	    }
+	}
+      else
+	{
+	  realm = strchr (opc->krbPrinc.bv_val, '@');
+	  if (realm)
+	    {
+	      int haveLower = 0;
+	      realm++;
+	      for (i = 0; realm[i]; i++)
+		{
+		  if (islower (realm[i]))
+		    haveLower = 1;
+		  realm[i] = TOUPPER (realm[i]);
+		}
+	      if (haveLower > 0)
+		{
+		  Debug (LDAP_DEBUG_STATS, "bypass_simple_bind: "
+			 "folding realm to upper case in ad_krb5PrincipalName %s.\n",
+			 a->a_vals[0].bv_val, NULL, NULL);
+		}
+	    }
+	}
       opc->flags = flags;
       cb->sc_response = retry_auth_with_kerberos;
       cb->sc_private = opc;
@@ -463,8 +520,10 @@
   cache_config *cconf = ch_malloc (sizeof (cache_config));
   int ret;
   const char *text;
+  Debug (LDAP_DEBUG_TRACE, "adpwc_over_init: " "called\n", 0, 0, 0);
 
   cconf->flags = KRB5_CACHE_NO_PASSWD;
+  cconf->state = KRB5_CACHE_MODULE_ENABLED;
   on->on_bi.bi_private = cconf;
 
   if (ad_krb5PrincipalName == NULL)
@@ -481,10 +540,12 @@
 	      Debug (LDAP_DEBUG_ANY, "check_krb5_creds: "
 		     "unable to find attributeType krbPrincipalName or krb5Principalname %s (%d).\n",
 		     text, ret, 0);
-	      return -1;
+	      cconf->state = KRB5_CACHE_MODULE_DISABLED;
+	      return 0;
 	    }
 	}
     }
+  cconf->state |= KRB5_CACHE_SMB_ENABLED;
   if (ad_sambaNTPassword == NULL)
     {
       ret = slap_str2ad ("sambaNTPassword", &ad_sambaNTPassword, &text);
@@ -493,7 +554,8 @@
 	  Debug (LDAP_DEBUG_ANY, "check_krb5_creds: "
 		 "unable to find attributeType sambaNTPassword %s (%d).\n",
 		 text, ret, 0);
-	  return -1;
+	  cconf->state &= ~(KRB5_CACHE_SMB_ENABLED);
+	  return 0;
 	}
     }
   if (oc_sambaSamAccount == NULL)
@@ -503,9 +565,12 @@
 	{
 	  Debug (LDAP_DEBUG_ANY, "check_krb5_creds: "
 		 "unable to find objectclass sambaSamAccount.\n", 0, 0, 0);
-	  return -1;
+	  cconf->state &= ~(KRB5_CACHE_SMB_ENABLED);
+	  return 0;
 	}
     }
+  Debug (LDAP_DEBUG_TRACE, "adpwc_over_init: " "state %d\n", cconf->state, 0,
+	 0);
   return 0;
 }
 
@@ -515,6 +580,7 @@
 {
   slap_overinst *on = (slap_overinst *) be->bd_info;
   cache_config *cconf = on->on_bi.bi_private;
+  Debug (LDAP_DEBUG_TRACE, "adpwc_over_config: " "called\n", 0, 0, 0);
 
   if (strcasecmp (argv[0], "adpw-cache-mode") == 0)
     {
@@ -540,9 +606,19 @@
 	}
       else if (strcasecmp (argv[1], "any") == 0)
 	{
-	  Debug (LDAP_DEBUG_CONFIG, "adpwc_over_config: "
-		 "use KRB5_CACHE_ANY_PASSWD\n", 0, 0, 0);
-	  cconf->flags = KRB5_CACHE_ANY_PASSWD;
+	  if (cconf->flags == KRB5_CACHE_SMB_ENABLED)
+	    {
+	      Debug (LDAP_DEBUG_CONFIG, "adpwc_over_config: "
+		     "use KRB5_CACHE_ANY_PASSWD\n", 0, 0, 0);
+	      cconf->flags = KRB5_CACHE_USER_PASSWD | KRB5_CACHE_ANY_PASSWD;
+	    }
+	  else
+	    {
+	      Debug (LDAP_DEBUG_CONFIG, "adpwc_over_config: "
+		     "adpw-cache-mode 'any' configured, but no samba schema present: use KRB5_CACHE_USER_PASSWD\n",
+		     0, 0, 0);
+	      cconf->flags = KRB5_CACHE_USER_PASSWD;
+	    }
 	}
       else
 	{
@@ -554,9 +630,14 @@
 	}
       return 0;
     }
+  else if (strcasecmp (argv[0], "adpw-cache-keep-realm-case") == 0)
+    {
+      cconf->flags |= KRB5_CACHE_KEEP_REALM_CASE;
+      return 0;
+    }
 
-  return 0;
-  // return SLAP_CONF_UNKNOWN;
+  // return 0;
+  return SLAP_CONF_UNKNOWN;
 }
 
 static int
